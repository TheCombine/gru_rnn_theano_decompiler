Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a1 - a2 - a3) + a5;
	v7 = a4 * (a1 - (a2 + a5));
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) + a3;
	if (a3 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8, v9, v10, v11 = 0;
	v6 = (a3 + (a3 - a5)) - a4;
	v7 = 0;
	for (v8 = 0; v8++; v8 < a2)
	{
		if (a4 < a2)
		{
			v7 += a1 * a5;
		}
		else
		{
			v7 += (a2 * a5) * a2;
		}

	}
	v9 = 0;
	for (v10 = 0; v10++; v10 < a5)
	{
		if (a3 < a3)
		{
			v9 += a4 * a1;
		}
		else
		{
			v9 + = a2 * a2 + a2;
		}

	}
	if (a1 < a2)
	{
		v11 = a1 * a1 * a5;
	}
	else
	{
		v11 = a2 + a2;
	}
	return v10 + v11 + a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8 = 0;
	v6 = 0;
	for (v7 = 0; v7++; v7 < a5)
	{
		v6 += (a4 - a2) + a4;
	}
	v8 = 0;
	for(v9 = 0; v9++; v9 < a3)
	{
		v8 + = (a1 + a5) + a1;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8, v9, v10 = 0;
	if (a2 < a2)
	{
		v6 = a1 * ((a3 * a2) + a4);
	}
	else
	{
		v6 = a1 + (a4 - a2);
	}
	v7 = a4 * a2;
	v8 = 0;
	for (v9 = 0; v9++; v9 < a5)
	{
		v8 += (a1 - a2) - a1;
	}
	if (v7 < a3)
	{
		v10 = (a4 + a2) * a3 * a5;
	}
	else
	{
		v10 = (a5 * a3 + a5) - a3;
	}
	return v10 + a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) * a3;
	if (a4 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8 = 0;
	v6 = 0;
	for (v7 = 0; v7++; v7 < a1)
	{
		v6 += a5 - a4;
	}
	if (v7 < a1)
	{
		v8 = a4 * ((a1 * a5) + a4);
	}
	else
	{
		v8 = ((a1 - a4) - a1) + a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) * a3;
	if (a4 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8, v9, v10, v11 = 0;
	if (a1 < a5)
	{
		v6 = a5 - a5;
	}
	else
	{
		v6 = a5 + a1 + a3 - a1;
	}
	v7 = 0;
	for (v8 = 0; v8++; v8 < a5)
	{
		v7 += a1 * a3 - a2;
	}
	v9 = a3 * (a5 - a1) + a4;
	v10 = 0;
	for (v11 = 0; v11++; v11 < a2)
	{
		if (a1 < a2)
		{
			v10 + = (a5 + a5) * a5;
		}
		else
		{
			v10 + = (a5 + a2) - a3;
		}
	}
	return v10 + v11 + a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) * a3;
	if (a4 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8 = 0;
	v6 = 0;
	for (v7 = 0; v7++; v7 < a4)
	{
		if (a4 < a2)
		{
			v6 += a2 * a2;
		}
		else
		{
			v6 += (a2 + a2) - a3;
		}
	}
	v8 = a2 + (a1 + a1);
	return a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) * a3;
	if (a3 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a5 + a2) + a5 - a5;
	v7 = a4 - a3;
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) + a3;
	if (a3 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8, v9, v10, v11 = 0;
	v6 = (a3 - a3) * a4 - a5;
	v7 = 0;
	for (v8 = 0; v8++; v8 < a2)
	{
		if (a2 < a5)
		{
			v7 += a1 + a4 - a4;
		}
		else
		{
			v7 += a2 - a2 * a2;
		}
	}
	v9 = 0;
	for (v10 = 0; v10++; v10 < a5)
	{
		v9 += a2 + a4;
	}
	if (v7 < a3)
	{
		v11 = a1 + a3;
	}
	else
	{
		v11 = a1 + a2 * a2 * a3;
	}
	return v10 + v11 + a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) * a3;
	if (a3 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8, v9, v10 = 0;
	v6 = a1 + a5;
	v7 = 0;
	for (v8 = 0; v8++; v8 < a1)
	{
		if (a1 < a1)
		{
			v7 += a5 - a5;
		}
		else
		{
			v7 += (a1 * a2) - a4;
		}
	}
	if (a2 < a3)
	{
		v9 = a2 * a4 + a5;
	}
	else
	{
		v9 = a1 + a1 - a2;
	}
	if (v9 < a4)
	{
		v10 = (a1 * a5 - a3) + a1;
	}
	else
	{
		v10 = a3 + (a4 * a3 - a4);
	}
	return v10 + a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8 = 0;
	v6 = 0;
	for (v7 = 0; v7++; v7 < a5)
	{
		v6 += (a4 - a2) + a4;
	}
	v8 = 0;
	for (v9 = 0; v9++; v9 < a3)
	{
		v8 += (a1 + a5) + a1;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}


Expected:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7, v8, v9, v10, v11 = 0;
	v6 = 0;
	for (v7 = 0; v7++; v7 < a1)
	{
		if (a3 < a5)
		{
			v6 += a5 + a2 * a3;
		}
		else
		{
			v6 += a2 + a5 * a4;
		}

	}
	if (v8 < a1)
	{
		v8 = a1 - (a3 + a4 * a3);
	}
	else
	{
		v8 = a2 - (a3 + a1);
	}
	v9 = 0;
	for (v10 = 0; v10++; v10 < a4)
	{
		if (a2 < a5)
		{
			v9 += a4 - (a4 * a1);
		}
		else
		{
			v9 += a3 * (a2 + a5);
		}

	}
	if (v11 < a1)
	{
		v11 = a5 + (a5 - a3 - a5);
	}
	else
	{
		v11 = a4 - (a3 + a3 + a2);
	}
	return v10 + v11 + a1 + a3 + a2 + a5 + a4 + v6 + v7 + v8 + v9;
}
Prediction:
int func1(int a1, int a2, int a3, int a4, int a5)
{
	int v6, v7 = 0;
	v6 = (a3 + a2) * a3;
	if (a4 < a3)
	{
		v7 = ((a2 - a1) + a4) + a4;
	}
	else
	{
		v7 = (a2 * a2) - a3 * a5;
	}
	return a1 + a3 + a2 + a5 + a4 + v6 + v7;
}


